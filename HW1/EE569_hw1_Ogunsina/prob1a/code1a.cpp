//  EE569 Homework Assignment #Prob1a//  Date:   02/07/2021//  Name:   Morayo Abisola Ogunsina//  ID:     7371213793//  email:  ogunsina@usc.edu // To run the code : // 1. Use terminal and navigate to code path = /prob1a // 2. type in g++ -o prob1a code1a.cpp // 3. then prob1a.exe <input_raw> <output_raw> <color mode> // set color mode to 1 since it is for gray scale. // e.g prob1a.exe House.raw House_output.raw 1 // to view output on ImageJ: // 1. import raw output file // 2. select image type 24-bit RGB // 3. set width to 580, height to 440 // 4. OK.#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char* argv[]){	///////////////////////// BEGINNING CODE PROVIDED BY TA, ADDED MODIFICATIONS /////////////////////////	// Define file pointer and variables	FILE* file;	int BytesPerPixel;	const int ImgWidth = 580, ImgHeight = 440; // number of columns in the image, // number of rows in the image	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] " << endl;		return 0;	}	////////////// Get aruguments //////////////////	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[3]); // else it is RGB		// Check if size is specified		if (argc >= 5) {			//ImgWidth= atoi(argv[4]);			//ImgHeight = atoi(argv[5]);		}	}	// get size of image length	int length = BytesPerPixel * ImgHeight * ImgWidth;	// Allocate image data array	unsigned char Imagedata[ImgHeight][ImgWidth][1];   // Use a 3D array	// for the output array, in color	unsigned char Outputdata[ImgHeight][ImgWidth][3];  // use a 3d array	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	// read the House.raw and store in 1d array	fread(Imagedata, sizeof(unsigned char), length, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	// Using Bayer Array Pattern, Need to reconstruct missing R, G, B colors. 	// 2x of Green and 1x each of Red and Blue	// for each pixel, do bilinear interpolation to get missing R or G or B pixel values	// Use formula provided in class	//	//    RED center pattern      	//          B G B 	//          G R G ,     add corner blues and cross greens	//          B G B 	//	//    GREEN first center pattern                        GREEN second center pattern	//          G B G                                           G R G	//          R G R ,     add  horiz cross reds               B G B  ,    add horiz cross blues	//          G B G       &    vert  cross blues              G R G       & vert cross reds	// 	//    BLUE center pattern	//          R G R	//          G B G ,     add corner reds and cross greens	//          R G R	// Color channels 	int RED = 0;       // red 	int GREEN = 1;     // green	int BLUE = 2;      // blue 	// we are assuming image is grayscale so no third loop here. 	for (int i = 0; i < ImgHeight; i++) {		for (int j = 0; j < ImgWidth; j++) {			// For Red color pixel in Bayer pattern, add Blue and Green missing values			if ((i % 2 == 0) && (j % 2 == 1)) // Red @ even locations , then @ odd locations at the same time			{				Outputdata[i][j][RED] = Imagedata[i][j][0];				// For cross greens, 				// Add average of horizontal and vertical green 				Outputdata[i][j][GREEN] = (unsigned char)(0.25 * ((float)Imagedata[i - 1][j][0]					+ (float)Imagedata[i][j + 1][0]					+ (float)Imagedata[i + 1][j][0]					+ (float)Imagedata[i][j - 1][0]));					// For corner blues, 					// Add average of corners				Outputdata[i][j][BLUE] = (unsigned char)(0.25 * ((float)Imagedata[i - 1][j - 1][0]					+ (float)Imagedata[i - 1][j + 1][0]					+ (float)Imagedata[i + 1][j - 1][0]					+ (float)Imagedata[i + 1][j + 1][0]));			}			// For Green color pixel first pattern, add missing Blue and Red values			else if ((i % 2 == 0) && (j % 2 == 0)) // Green @ even locations			{				Outputdata[i][j][GREEN] = Imagedata[i][j][0];				// Add average of horizontal red 				Outputdata[i][j][RED] = (unsigned char)(0.5 * ((float)Imagedata[i][j - 1][0] + (float)Imagedata[i][j + 1][0]));				// Add average of vertical blue 				Outputdata[i][j][BLUE] = (unsigned char)(0.5 * ((float)Imagedata[i + 1][j][0] + (float)Imagedata[i - 1][j][0]));			}			// For Green color pixel second pattern, add Blue and Red missing values			else if ((i % 2 == 1) && (j % 2 == 1)) // Green @ odd locations			{				Outputdata[i][j][GREEN] = Imagedata[i][j][0];				// Add average of horizontal blue 				Outputdata[i][j][BLUE] = (unsigned char)(0.5 * ((float)Imagedata[i][j - 1][0] + (float)Imagedata[i][j + 1][0]));				// Add average of vertical reds 				Outputdata[i][j][RED] = (unsigned char)(0.5 * ((float)Imagedata[i + 1][j][0] + (float)Imagedata[i - 1][j][0]));			}			// For Blue color pixel in Bayer color pattern, add Green and Red missing values			else if ((i % 2 == 1) && (j % 2 == 0))  // Blue @ odd locations, then @ even locations			{				Outputdata[i][j][BLUE] = Imagedata[i][j][0];				// For cross greens, 				// Add average of horizontal and vertical green 				Outputdata[i][j][GREEN] = (unsigned char)(0.25 * ((float)Imagedata[i - 1][j][0]					+ (float)Imagedata[i + 1][j][0]					+ (float)Imagedata[i][j + 1][0]					+ (float)Imagedata[i][j - 1][0]));				// for corner reds, 				// add average of corners 				Outputdata[i][j][RED] = (unsigned char)(0.25 * ((float)Imagedata[i - 1][j - 1][0]					+ (float)Imagedata[i + 1][j - 1][0]					+ (float)Imagedata[i - 1][j + 1][0] +					+(float)Imagedata[i + 1][j + 1][0]));			}		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Outputdata, sizeof(unsigned char), ImgHeight * ImgWidth * 3, file); // mult by 3 for rgb color	fclose(file);	return 0;}